{"version":3,"sources":["components/TodoItems/TodoItems.js","components/AddItem/AddItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","items","deleteItem","ListItems","length","map","item","key","id","className","name","age","onClick","AddItem","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","addItem","onSubmit","this","type","placeholder","onChange","Component","App","filter","Math","random","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNA8BeA,G,aA3BG,SAACC,GAAW,IACnBC,EAAsBD,EAAtBC,MAAQC,EAAcF,EAAdE,WAETC,EADOF,EAAMG,OAElBH,EAAMI,KAAI,SAAAC,GACP,OACA,yBAAKC,IAAOD,EAAKE,IACjB,0BAAOC,UAAU,QAASH,EAAKI,MAC/B,0BAAOD,UAAU,OAAQH,EAAKK,KAC9B,0BAAOF,UAAU,cAAeG,QAAS,kBAAMV,EAAWI,EAAKE,MAA/D,YAKD,oDAEJ,OACK,yBAAKC,UAAU,aACX,6BACQ,0BAAMA,UAAU,cAAhB,QACA,0BAAMA,UAAU,aAAhB,OACA,0BAAMA,UAAU,gBAAhB,WAEXN,K,QCmBMU,E,2MAvCbC,MAAQ,CACNJ,KAAO,GACPC,IAAM,I,EAIRI,aAAe,SAACC,GACd,EAAKC,SAAL,eACCD,EAAEE,OAAOV,GAAMQ,EAAEE,OAAOC,S,EAK3BC,aAAe,SAACJ,GAGd,GAFAA,EAAEK,iBAEwB,KAAtBL,EAAEE,OAAOR,KAAKS,MACd,OAAO,EAEX,EAAKnB,MAAMsB,QAAQ,EAAKR,OACxB,EAAKG,SAAS,CACZP,KAAK,GACLC,IAAI,M,wEAKF,OACA,6BACI,0BAAMY,SAAUC,KAAKJ,cACf,2BAAOK,KAAK,OAAOC,YAAY,iBAAiBlB,GAAG,OAAOmB,SAAUH,KAAKT,aAAcI,MAAOK,KAAKV,MAAMJ,OACzG,2BAAOe,KAAK,SAASC,YAAY,gBAAgBlB,GAAG,MAAMmB,SAAUH,KAAKT,aAAcI,MAAOK,KAAKV,MAAMH,MACzG,2BAAOc,KAAK,SAASN,MAAM,c,GApCvBS,aCyCPC,E,2MArCbf,MAAQ,CACNb,MAAQ,CACN,CAACO,GAAG,EAAEE,KAAK,QAAQC,IAAI,IACvB,CAACH,GAAG,EAAEE,KAAK,UAAUC,IAAI,IACzB,CAACH,GAAG,EAAEE,KAAK,QAAQC,IAAI,M,EAI3BT,WAAa,SAACM,GAKf,IAAIP,EAAM,EAAKa,MAAMb,MAAM6B,QAAO,SAAA7B,GAChC,OAAOA,EAAMO,KAAOA,KAEtB,EAAKS,SAAS,CAAChB,W,EAIhBqB,QAAU,SAAChB,GACXA,EAAKE,GAAKuB,KAAKC,SACf,IAAI/B,EAAQ,EAAKa,MAAMb,MACvBA,EAAMgC,KAAK3B,GACX,EAAKW,SAAS,CAAChB,W,wEAGb,OACE,yBAAKQ,UAAU,iBACd,wBAAIA,UAAU,eAAd,eACA,kBAAC,EAAD,CAAWR,MAASuB,KAAKV,MAAMb,MAAOC,WAAasB,KAAKtB,aACxD,kBAAC,EAAD,CAASoB,QAASE,KAAKF,e,GAhCVM,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e0a68b93.chunk.js","sourcesContent":["import React from 'react'\r\nimport './TodoItems.css'\r\n\r\nconst TodoItems = (props) => {\r\n    const {items , deleteItem} = props;\r\n    let length = items.length;\r\n    const ListItems = length ? ( \r\n     items.map(item => {\r\n        return (\r\n        <div key = {item.id}>\r\n        <span  className=\"name\" >{item.name}</span>\r\n        <span  className=\"age\" >{item.age}</span>\r\n        <span  className=\"action icon\"  onClick={() => deleteItem(item.id)}>&times;</span>\r\n            </div>\r\n        )\r\n   })\r\n   ) : (\r\n       <p>there is no item show</p>\r\n   )\r\n   return (\r\n        <div className=\"ListItems\">\r\n            <div>\r\n                    <span className=\"name title\">Name</span>\r\n                    <span className=\"age title\">Age</span>\r\n                    <span className=\"action title\" >Action</span>\r\n            </div>\r\n        {ListItems} \r\n    </div>\r\n    )\r\n}\r\nexport default TodoItems ","import React , {Component} from 'react'\r\n\r\nclass AddItem extends Component\r\n{\r\n\r\n\r\n  state = {\r\n    name : '',\r\n    age : ''\r\n  }\r\n\r\n\r\n  handleChange = (e) => {\r\n    this.setState ({\r\n    [e.target.id] : e.target.value\r\n  })\r\n\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (e.target.name.value===''){\r\n        return false\r\n  } else {\r\n    this.props.addItem(this.state)\r\n    this.setState({\r\n      name:'',\r\n      age:''\r\n    })\r\n  }\r\n} \r\n    render () {\r\n        return (\r\n        <div>\r\n            <form onSubmit={this.handleSubmit}>\r\n                  <input type=\"text\" placeholder=\"Enter name ...\" id=\"name\" onChange={this.handleChange} value={this.state.name}/>\r\n                  <input type=\"number\" placeholder=\"Enter age ...\" id=\"age\" onChange={this.handleChange} value={this.state.age}/>\r\n                  <input type=\"submit\" value=\"Add\"/>               \r\n            </form>\r\n        </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default AddItem","import React, { Component } from 'react';\nimport { render } from '@testing-library/react';\nimport TodoItems from './components/TodoItems/TodoItems'\nimport AddItem  from './components/AddItem/AddItem'\n\nclass App extends Component{\n  state = {\n    items : [\n      {id:1,name:'hamza',age:22},\n      {id:2,name:'mohamed',age:32},\n      {id:3,name:'hamza',age:44}\n    ]\n  }\n\n  deleteItem = (id) => {\n // let items=this.state.items;\n // let i =items.findIndex(item => item.id===id)\n // items.splice(i,1)\n // this.setState({items:items}) \n let items=this.state.items.filter(items=>{\n   return items.id !== id\n })\n this.setState({items})\n}\n\n\naddItem = (item) => {\nitem.id = Math.random();\nlet items = this.state.items;\nitems.push(item);\nthis.setState({items}) \n}\n  render(){\n  return (\n    <div className=\"App container\">\n     <h1 className=\"Text-center\"> Todo List </h1>\n     <TodoItems items = {this.state.items} deleteItem ={this.deleteItem}/>\n     <AddItem addItem={this.addItem}/>\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}